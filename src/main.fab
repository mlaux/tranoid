// Entry point and title screen

charmap(" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.,:?!\"'/()&\0", '\0', $cf)
: stows /strings

ct U[25] palette_initial = U[25](
    $2c, $27, $30,
    $0f, $0f, $0f, // make text black originally
    $1c, $2c, $0f,
    $0f, $0f, $0f,

    $0f, $0f, $0f,
    $0f, $0f, $0f,
    $0f, $0f, $0f,
    $0f, $0f, $0f,

    $0f // background color
)

data /rlz
    [] title_screen
        file(rlz, "title.nam")

vars /global
    // last digit will always be 00 for that arcade feel
    U[] hi_score = U[5](ZERO_TILE)

vars /title
    UF scroll
    UF sprite_y
    UU frame = 0
    Bool two_player = false
    U speed_idx = 0
    U frames_this_speed = 0

ct U[] hidden_credit = U[] (
    $70, $71, $72, $0, // NES
    $73, $79, $74, $75, $0, // PORT
    $76, $77, $0, // BY
    $78, $79, $70, $72, $75, $78, $7a, $72, $75, $0, // CONSTCAST
    $7b, $7c, $7b, $7d // 2025
)
ct UU HIDDEN_CREDIT_POS = $2063
ct U PLAYER_SELECT_ICON = $f7
ct UU PLAYER_SELECT_POS_1P = $226a
ct UU PLAYER_SELECT_POS_2P = $22aa
ct U FAKE_SPRITE_ID = $43

ct U FROG_TOP_LEFT = $50
ct U FROG_TOP_RIGHT = $51
ct U FROG_BOTTOM_LEFT = $60
ct U FROG_BOTTOM_RIGHT = $61

ct UU FROG_DEST_TOP_LEFT = $2342
ct UU FROG_DEST_TOP_RIGHT = $2343
ct UU FROG_DEST_BOTTOM_LEFT = $2362
ct UU FROG_DEST_BOTTOM_RIGHT = $2363

ct U SFX_DEAD = $0
ct U SFX_CHIRP = $1

ct UU SCORE_ADDR = $21cf

ct U[] SPEEDS = U[] (3, 3, 1)

audio(puf1_music, "testexport.txt")
audio(puf1_sfx, "sfx.txt", "sfx.nsf")

mode main()
    puf.init(system)
    goto mode title(true) : preserves /global
    //goto mode game(false, true) : preserves /global

fn draw_hidden_credit()
: +inline
    ppu_reset_addr(HIDDEN_CREDIT_POS)
    for U i = 0; i < len(hidden_credit); i += 1
        {PPUDATA}(hidden_credit[i])

fn draw_5key_frog_icon(Bool show)
    if show
        ppu_reset_addr(FROG_DEST_TOP_LEFT)
        {PPUDATA}(FROG_TOP_LEFT)
        ppu_set_addr(FROG_DEST_TOP_RIGHT)
        {PPUDATA}(FROG_TOP_RIGHT)
        ppu_set_addr(FROG_DEST_BOTTOM_LEFT)
        {PPUDATA}(FROG_BOTTOM_LEFT)
        ppu_set_addr(FROG_DEST_BOTTOM_RIGHT)
        {PPUDATA}(FROG_BOTTOM_RIGHT)
    else
        ppu_reset_addr(FROG_DEST_TOP_LEFT)
        {PPUDATA}(0)
        ppu_set_addr(FROG_DEST_TOP_RIGHT)
        {PPUDATA}(0)
        ppu_set_addr(FROG_DEST_BOTTOM_LEFT)
        {PPUDATA}(0)
        ppu_set_addr(FROG_DEST_BOTTOM_RIGHT)
        {PPUDATA}(0)

fn draw_player_icon()
: +inline
    if two_player
        ppu_reset_addr(PLAYER_SELECT_POS_1P)
        {PPUDATA}(0)
        ppu_reset_addr(PLAYER_SELECT_POS_2P)
        {PPUDATA}(PLAYER_SELECT_ICON)
    else
        ppu_reset_addr(PLAYER_SELECT_POS_1P)
        {PPUDATA}(PLAYER_SELECT_ICON)
        ppu_reset_addr(PLAYER_SELECT_POS_2P)
        {PPUDATA}(0)

nmi title_nmi()
    if ready
        ppu_upload_oam_poll_pads(0)
        ppu_upload_palette()

        if pads[0].pressed & BUTTON_SELECT
            draw_hidden_credit()

        draw_score(hi_score, SCORE_ADDR)
        draw_5key_frog_icon(pads[0].held & BUTTON_SELECT)
        draw_player_icon()

    ppu_reset_scroll(0, scroll.a)

    {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)
    {PPUCTRL}(PPUCTRL_NMI_ON)

    if scroll != 0
        // wait until rendering hits the bottom of the logo
        ppu_await_status(PPUSTATUS_SPR_0)
        // turn off rendering to hide wrap around
        {PPUMASK}(0)
        // alternatively... set horiz scroll to blank area.
        // not sure which is better
        // ppu_reset_scroll(216, scroll.a)

    puf.set_speed(SPEEDS[speed_idx])
    puf.process(PUF_DEFAULT)
    frames_this_speed += 1
    if frames_this_speed == SPEEDS[speed_idx]
        frames_this_speed = 0
        speed_idx += 1
        if speed_idx == len(SPEEDS)
            speed_idx = 0

mode title(Bool scroll_logo)
: nmi title_nmi
    {PPUCTRL}(0)
    {PPUMASK}(0)

    // Set the palette:
    palette = palette_initial
    ppu_upload_palette()

    // Setup the nametable:
    ppu_reset_addr($2000)
    ppu_upload_rlz(@title_screen)
    if scroll_logo
        scroll = $4f
        sprite_y = 1
    else
        scroll = 0

    state(0)
    hide_oam(0)
    set_oam(0, $50, sprite_y.a, FAKE_SPRITE_ID, 0)

    // commented out to avoid one frame of logo visible at the bottom
    //{PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)
    {PPUCTRL}(PPUCTRL_NMI_ON)

    puf.play_track(1)

    while true
        if scroll != 0
            scroll -= 0.5
            // move sprite 0 down to stay in sync with logo
            sprite_y += 0.5
            set_oam_y(0, sprite_y.a)
        else
            // either done scrolling or didn't scroll in the first place
            // make sure the sprite 0 isn't blocking anything
            hide_oam(0)

            // show the title screen text
            palette[5] = SCORE_BLUE
            palette[8] = WHITE

            // the "Press start button" is set to use palette 3 so make it
            // blink by toggling between white and black
            if frame & 31 >= 16
                palette[11] = WHITE
            else
                palette[11] = BLACK

        update_pads()

        if scroll == 0 && pads[0].pressed & BUTTON_DPAD
            two_player = !two_player
            puf.play_sfx(SFX_CHIRP)

        Bool another_mode = pads[0].held & BUTTON_SELECT
        if scroll == 0 && pads[0].pressed & BUTTON_START
            goto mode game(another_mode, two_player)
            : preserves /global

        frame += 1
        if frame >= $200
            //goto mode attract()
            //: preserves /global

        nmi

chrrom
    file(fmt, "title.chr")
    // odd ones actually do not matter because 16x16 sprites always get their data from $0
    file(fmt, "title.chr")
    file(fmt, "opening1/opening1.chr")
    file(fmt, "title.chr")
    file(fmt, "opening2/opening2.chr")
    file(fmt, "title.chr")
    file(fmt, "opening3/opening3.chr")
    file(fmt, "title.chr")
