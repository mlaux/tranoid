/*
 * TRANOID NES/Famicom port
 * Copyright 2025 Matthew Laux
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

ct U ZERO_TILE = $d0
ct U NINE_TILE = $d9

fn increment_score_1p()
    p1_score[4] += 1
    for S k = 4; k >= 1; k -= 1
        U idx = U(k)
        if p1_score[idx] == NINE_TILE + 1
            p1_score[idx] = ZERO_TILE
            p1_score[idx - 1] += 1

// NO POINTERS
fn increment_score_2p()
    p2_score[4] += 1
    for S k = 4; k >= 1; k -= 1
        U idx = U(k)
        if p2_score[idx] == NINE_TILE + 1
            p2_score[idx] = ZERO_TILE
            p2_score[idx - 1] += 1

fn draw_score(U[5] score, UU dest_addr)
    ppu_reset_addr(dest_addr)
    for U k = 0; k < 5; k += 1
        {PPUDATA}(score[k])

fn atoi(U[5] str) UU
    UU val = 0

    // need to find first non zero index to avoid extra multiplications
    // at the end
    U first_non_zero = 5
    for U k = 0; k < 5; k += 1
        if str[k] != ZERO_TILE
            first_non_zero = k
            break

    for U k = first_non_zero; k < 5; k += 1
        val = (val << 3) + (val << 1)
        val += str[U(k)] - ZERO_TILE

    return val

fn update_hi_score()
    UU current_p1 = atoi(p1_score)
    UU current_p2 = atoi(p2_score)
    UU hi = atoi(hi_score)

    if current_p1 > hi
        for U k = 0; k < 5; k += 1
            hi_score[k] = p1_score[k]

    hi = atoi(hi_score)
    if current_p2 > hi
        for U k = 0; k < 5; k += 1
            hi_score[k] = p2_score[k]